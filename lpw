#!/usr/bin/env bash
# LPW: Line Print Wrapper
# Made by Colin Melican <colinmelican@gmail.com>
# https://github.com/kolin63/lpw

# colors
c_reset="\e[0m"
c_lightyellow="\e[1;93m"
c_lightblue="\e[1;94m"

function print_help() {
  echo "LPW - Line Print Wrapper"
  echo "usage: lpw [-CI] [-u config] <args>"
  echo ""
  echo "Options:"
  echo "  -C          Disable color in text UI"
  echo "  -I          Disable dynamic UI"
  echo "  -u config   Use this config file"
  echo "  args        All other arguments will be passed to the wrapped program"
  echo ""
  echo "Configuration:"
  echo "A config file is checked for at \$HOME/.lpw"
}

if [[ $# -eq 0 ]]; then
  print_help
  exit 0
fi

# external args to be passed to wrapped program
ext_args=""

arg_nocolor=0
arg_nodynamicui=0
arg_config="$HOME/.lpw"

# iterate through args
waiting=""
for ((i=1; i<=$#; i++)); do
  arg="${!i}"

  if   [[ "$waiting" == "-u" ]]; then
    arg_config="$arg"
    waiting=""
  elif [[ "$arg" == "-u" ]]; then waiting="$arg"
  elif [[ "$arg" == "-C" ]]; then arg_nocolor=1
  elif [[ "$arg" == "-I" ]]; then arg_nodynamicui=1
  else
    ext_args="$ext_args$arg "
  fi
done

# optionally disable color
if [[ arg_nocolor -eq 1 ]]; then
  c_reset=""
  c_lightyellow=""
  c_lightblue=""
fi

# get config file contents
config_text=""
if [[ -e "$arg_config" ]]; then
  config_text="$(cat $arg_config)"
else
  echo "Error: Could not find config file $arg_config"
fi

# parse config file
config_args=($config_text)
ext_args_file=""
for ((i=0; i<${#config_args[@]}; i++)); do
  ext_args_file="$ext_args_file${config_args[i]} "
done

# check that there are external args
if [[ "$ext_args" == "" ]]; then
  echo "Error: args required for wrapped printer"
  print_help
  exit 0
fi

set_copies=1
set_pages="all"
set_sides="one-sided"

n_check=($ext_args_file)
ext_args_file=""
n_wait=0
for ((i=0; i<${#n_check[@]}; i++)); do
  opt="${n_check[i]}"
  if [[ "$opt" == "-n" ]]; then n_wait=1
  elif [[ n_wait -eq 0 ]]; then ext_args_file="$ext_args_file$opt "
  elif [[ n_wait -eq 1 ]]; then
    n_wait=0
    ext_args_file="$ext_args_file-o copies=$opt "
  fi
done

n_check=($ext_args)
ext_args=""
n_wait=0
for ((i=0; i<${#n_check[@]}; i++)); do
  opt="${n_check[i]}"
  if [[ "$opt" == "-n" ]]; then n_wait=1
  elif [[ n_wait -eq 0 ]]; then ext_args="$ext_args$opt "
  elif [[ n_wait -eq 1 ]]; then ext_args="$ext_args-o copies=$opt "
  fi
done

# update settings based on cli or config arguments
combined_text="$ext_args_file$ext_args"
combined=($combined_text)
opt_wait=0
for ((i=0; i<${#combined[@]}; i++)); do
  opt="${combined[i]}"

  if [[ "$opt" == "-o" ]]; then
    opt_wait=1
    continue
  elif [[ opt_wait -eq 0 ]]; then
    continue
  fi

  # get option name and value
  opt_wait=0
  opt_name=""
  opt_value="$opt"
  while [[ "${opt_value:0:1}" != "=" ]] && [[ "$opt_value" != "" ]]; do
    opt_name="$opt_name${opt_value:0:1}"
    opt_value="${opt_value:1}"
  done
  opt_value="${opt_value:1}"
  name_len=${#opt_name}

  # update the values
  if [[ "$opt_name" == "copies" ]]; then set_copies="$opt_value"
  elif [[ "$opt_name" == "page-set" ]]; then set_pages="$opt_value"
  elif [[ "$opt_name" == "page-ranges" ]]; then set_pages="$opt_value"
  elif [[ "$opt_name" == "sides" ]]; then set_sides="$opt_value"
  fi
done

function make_final_args() {
  combined_text="$ext_args_file$ext_args"
  combined=($combined_text)
  final_args=""
  opt_wait=0
  for ((i=0; i<${#combined[@]}; i++)); do
    opt="${combined[i]}"

    if [[ "$opt" == "-o" ]]; then
      opt_wait=1
      continue
    elif [[ opt_wait -eq 0 ]]; then
      final_args="$final_args$opt "
      continue
    fi

    # get option name and value
    opt_wait=0
    opt_name=""
    opt_value="$opt"
    while [[ "${opt_value:0:1}" != "=" ]] && [[ "$opt_value" != "" ]]; do
      opt_name="$opt_name${opt_value:0:1}"
      opt_value="${opt_value:1}"
    done
    opt_value="${opt_value:1}"
    name_len=${#opt_name}

    # check if this option was already checked and added
    opt_already_checked=0
    check_final=($final_args)
    for ((j=0; j<${#check_final[@]}; j++)); do
      jopt=${check_final[j]}
      if [[ "${jopt:0:name_len}" == "$opt_name" ]] &&
         [[ "${jopt:name_len:1}" == "=" ]]; then
        opt_already_checked=1
        break
      fi
    done
    if [[ opt_already_checked -eq 1 ]]; then continue; fi

    # check for overrides
    for ((j=$i; j<${#combined[@]}; j++)); do
      jopt=${combined[j]}
      if [[ "${jopt:0:name_len}" == "$opt_name" ]] &&
         [[ "${jopt:name_len:1}" == "=" ]]; then
        opt_value="${jopt:$(($name_len+1))}"
      fi
    done
    final_args="$final_args-o $opt_name=$opt_value "
  done
}

# clears n lines above cursor
# parameters: n
function clear_above() {
  if [[ arg_nodynamicui -eq 0 ]]; then
    for ((i=0; i<$1; i++)); do
      echo -ne "\e[1A\e[2K"
    done
  fi
}

# user input loop
while true; do
  # get choice
  echo -e $c_lightblue"Select an option:"$c_reset
  echo "1) Copies  [$set_copies]"
  echo "2) Pages   [$set_pages]"
  echo "3) Sides   [$set_sides]"
  echo "4) Custom"
  echo "5) Done"
  echo -ne $c_reset"> "
  echo -ne $c_lightyellow
  read choice
  echo -ne $c_reset

  clear_above 7

  if [[ choice -eq 1 ]]; then
    input=0
    while [[ ! input -ge 1 ]]; do
      echo -e $c_lightblue"Set amount of copies:"
      echo -ne $c_reset"> "
      echo -ne $c_lightyellow
      read input
      echo -ne $c_reset
    done
    set_copies=$input
    clear_above 2
  elif [[ choice -eq 2 ]]; then
    input="all"
    echo -e $c_lightblue"Set pages to print (all, odd, even, 3, 3-5)"
    echo -ne $c_reset"> "
    echo -ne $c_lightyellow
    read input
    echo -ne $c_reset
    set_pages=$input
    clear_above 2
  elif [[ choice -eq 3 ]]; then
    input=0
    while [[ input -lt 1 ]] || [[ input -gt 3 ]]; do
      echo -e $c_lightblue"Select an option:"
      echo -ne $c_reset
      echo "1) one sided"
      echo "2) two sided, flip on long edge"
      echo "3) two sided, flip on short edge"
      echo -ne $c_reset"> "
      echo -ne $c_lightyellow
      read input
      echo -ne $c_reset
      clear_above 5
    done
    if   [[ input -eq 1 ]]; then set_sides="one-sided";
    elif [[ input -eq 2 ]]; then set_sides="two-sided-long-edge";
    elif [[ input -eq 3 ]]; then set_sides="two-sided-short-edge";
    fi
  elif [[ choice -eq 4 ]]; then
    echo -e $c_lightblue"Enter an argument to pass to lp:"
    echo -ne $c_reset"> "
    echo -ne $c_lightyellow
    read input
    echo -ne $c_reset
    ext_args_file="$ext_args_file$input "
    clear_above 2
  elif [[ choice -eq 5 ]]; then
    ext_args_file="$ext_args_file-o copies=$set_copies "
    if [[ "$set_pages" == "all" ]] ||
       [[ "$set_pages" == "odd" ]] ||
       [[ "$set_pages" == "even" ]]; then
      ext_args_file="$ext_args_file-o page-set=$set_pages "
    else
      ext_args_file="$ext_args_file-o page-ranges=$set_pages "
    fi
    ext_args_file="$ext_args_file-o sides=$set_sides "
    make_final_args
    input=""
    while [[ "$input" != "y" ]] && [[ "$input" != "n" ]]; do
      echo "lp $final_args"
      echo -e $c_lightblue"Confirm and send to printer? (y/n)"
      echo -ne $c_reset"> "
      echo -ne $c_lightyellow
      read input
      echo -ne $c_reset
      clear_above 3
    done
    if [[ "$input" == "y" ]]; then
      echo "Printing..."
      lp $final_args
      break
    fi
  fi
done
